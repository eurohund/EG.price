(function(){var loadHandler=window['s_{4F17417D-E6AC-412F-BC31-0E9624286DAE}'];var scenarioJson = "";var skinSettingsJson = {"characterSpeech":{"fontFamily":"Open Sans","type":"standard"},"colors":{"audio.playback":{"value":"#339BE0"},"button.background.normal":{"value":"#339BE0"},"button.background.over":{"value":"#3A8FC7"},"button.text.normal":{"value":"#FFFFFF"},"button.text.over":{"value":"#FFFFFF"},"characterSpeech.background":{"alpha":"0.89804","value":"#FFFFFF"},"characterSpeech.text":{"value":"#000000"},"hyperlinks":{"value":"#097CE7"},"message.background":{"alpha":"0.89804","value":"#FFFFFF"},"message.text":{"value":"#000000"},"pageBackground":{"value":"#263944"},"reply.background.normal":{"alpha":"0.89804","value":"#FFFFFF"},"reply.background.over":{"alpha":"0.89804","value":"#D6ECFF"},"reply.text":{"value":"#31363F"},"title.background":{"alpha":"0.20784","value":"#425159"},"title.text":{"value":"#E8E8E8"}},"message":{"fontFamily":"Open Sans","type":"standard"},"moodMeter":{"type":"standard","visible":true},"reply":{"bullet":{"type":"numbers"},"fontFamily":"Open Sans","type":"standard"},"showTitle":false};var i18nJson = {"AUTHORIZATION_FORM_ERROR_EMAIL":"Укажите правильный адрес электронной почты","AUTHORIZATION_FORM_ERROR_FIELD_REQUIRED":"Обязательное поле","AUTHORIZATION_FORM_SEND_TO_STUDENT_EMAIL_HINT":"Результаты будут отправлены на указанный E-mail","AUTHORIZATION_FORM_TITLE":"Введите ваши данные:","Player.Application.Back":"Назад","Player.Button.Back":"Назад","Player.Button.Continue":"Продолжить","Player.Button.Finish":"Завершить","Player.Button.No":"Нет","Player.Button.OK":"ОК","Player.Button.Restart":"Начать сначала","Player.Button.Skip":"Пропустить","Player.Button.Yes":"Да","Player.Message.Btn.Text":"Продолжить","Player.Message.Start.Btn.Text":"Начать","Player.Msg.ResumePrompt":"Хотите ли Вы продолжить с того места, где остановились в прошлый раз?","Player.Msg.ResumePromptTitle":"Продолжить диалог","Player.Msg.SendReportToEmailFailed":"Не удалось отправить результаты на e-mail. Попробовать еще раз?","Player.Msg.SendReportToUrlFailed":"Не удалось отправить результаты на сервер. Попробовать еще раз?","Player.Msg.SendingReport":"Отправка результатов...","Player.Msg.UserScoreTemplate(%USER_SCORE%)":"Ваш результат: %USER_SCORE%","Player.Msg.UserScoreWithMaxScoreTemplate(%USER_SCORE%)":"Ваш результат: %USER_SCORE% из %MAX_SCORE% баллов"};var reportTemplate = "<scenarioReportTemplate version=\"4\" xmlns=\"http:\/\/www.ispringsolutions.com\/talkmaster\/scenario\/1\"><templates><template id=\"useTakersEmailSettings\"><![CDATA[false]]><\/template><\/templates><messages><message id=\"from\"><![CDATA[iSpring Solutions]]><\/message><message id=\"subject\"><![CDATA[[%SIM_STATUS%] Результат диалога: &quot;%SIM_TITLE%&quot;]]><\/message><message id=\"user\"><![CDATA[Пользователь:]]><\/message><message id=\"userId\"><![CDATA[Id пользователя:]]><\/message><message id=\"disclaimer\"><![CDATA[Это автоматическое сообщение с отчетом о результатах диалога. Вы видите это сообщение, потому что автор диалога включил отправку результатов на ваш электронный адрес.]]><\/message><message id=\"gradedScenario\"><![CDATA[Оцениваемый диалог]]><\/message><message id=\"surveyScenario\"><![CDATA[Диалог]]><\/message><message id=\"userScore\"><![CDATA[Набранный балл:]]><\/message><message id=\"maxScore\"><![CDATA[Максимальный балл:]]><\/message><message id=\"passingScore\"><![CDATA[Проходной балл:]]><\/message><message id=\"duration\"><![CDATA[Продолжительность диалога:]]><\/message><message id=\"scenarioResult\"><![CDATA[Результат:]]><\/message><message id=\"passed\"><![CDATA[Диалог успешно пройден]]><\/message><message id=\"failed\"><![CDATA[Диалог не пройден]]><\/message><message id=\"finished\"><![CDATA[Диалог завершен]]><\/message><message id=\"score\"><![CDATA[Баллы:]]><\/message><message id=\"spentTimeFormat\"><![CDATA[%SPENT_TIME%]]><\/message><\/messages><\/scenarioReportTemplate>";var maxScore = '0';var reportUrl = "https://s4.ispring.ru";loadHandler&&loadHandler(1, 's_00987275-6DA9-4985-AB27-319F278FB902', scenarioJson, skinSettingsJson, i18nJson, reportTemplate, maxScore, reportUrl);})();